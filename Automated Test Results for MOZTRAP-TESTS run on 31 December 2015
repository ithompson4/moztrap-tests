(moztrap) C:\Users\Iryna\Documents\GitHub\moztrap-tests>py.test --driver=Firef
ox
c:\users\Iryna\moztrap\lib\site-packages\requests\packages\urllib3\connectionp
ool.py:789: InsecureRequestWarning: Unverified HTTPS request is being made. Addi
ng certificate verification is strongly advised. See: https://urllib3.readthedoc
s.org/en/latest/security.html
  InsecureRequestWarning)
c:\users\Iryna\moztrap\lib\site-packages\requests\packages\urllib3\connectionp
ool.py:789: InsecureRequestWarning: Unverified HTTPS request is being made. Addi
ng certificate verification is strongly advised. See: https://urllib3.readthedoc
s.org/en/latest/security.html
  InsecureRequestWarning)
============================= test session starts =============================
platform win32 -- Python 2.7.11 -- py-1.4.31 -- pytest-2.7.3
rootdir: C:\Users\Iryna\Documents\GitHub\moztrap-tests, inifile:
plugins: mozwebqa, variables
collected 36 items

tests\test_homepage.py E

=================================== ERRORS ====================================
_____ ERROR at setup of TestHomepage.test_that_user_can_login_and_logout ______

item = <Function 'test_that_user_can_login_and_logout'>

    def pytest_runtest_setup(item):
        item.debug = {
            'urls': [],
            'screenshots': [],
            'html': [],
            'logs': [],
            'network_traffic': []}
        TestSetup.base_url = item.config.option.base_url

        # configure test proxies
        if hasattr(item.config, 'browsermob_test_proxy'):
            item.config.option.proxy_host = item.config.option.bmp_host
            item.config.option.proxy_port = item.config.browsermob_test_proxy.po
rt

        # consider this environment sensitive if the base url or any redirection

        # history matches the regular expression
        sensitive = False
        if TestSetup.base_url and not item.config.option.skip_url_check:
            r = requests.get(TestSetup.base_url, verify=False, timeout=REQUESTS_
TIMEOUT)
            urls = [h.url for h in r.history] + [r.url]
            matches = [re.search(item.config.option.sensitive_url, u) for u in u
rls]
            sensitive = any(matches)

        destructive = 'nondestructive' not in item.keywords

        if (sensitive and destructive):
            first_match = matches[next(i for i, match in enumerate(matches) if m
atch)]

            # skip the test with an appropriate message
            py.test.skip('This test is destructive and the target URL is '
                         'considered a sensitive environment. If this test is '
                         'not destructive, add the \'nondestructive\' marker to
'
                         'it. Sensitive URL: %s' % first_match.string)

        if item.config.option.sauce_labs_credentials_file:
            item.sauce_labs_credentials = credentials.read(item.config.option.sa
uce_labs_credentials_file)

        if item.config.option.credentials_file:
            TestSetup.credentials = credentials.read(item.config.option.credenti
als_file)

        test_id = '.'.join(split_class_and_test_names(item.nodeid))

        if 'skip_selenium' not in item.keywords:
            if hasattr(item, 'sauce_labs_credentials'):
                from sauce_labs import Client
                TestSetup.selenium_client = Client(
                    test_id,
                    item.config.option,
                    item.keywords,
                    item.sauce_labs_credentials)
            else:
                from selenium_client import Client
                TestSetup.selenium_client = Client(
                    test_id,
                    item.config.option)
>           TestSetup.selenium_client.start()

..\..\..\moztrap\lib\site-packages\pytest_mozwebqa\pytest_mozwebqa.py:128:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\moztrap\lib\site-packages\pytest_mozwebqa\selenium_client.py:91: in sta
rt
    self.start_webdriver_client()
..\..\..\moztrap\lib\site-packages\pytest_mozwebqa\selenium_client.py:162: in st
art_webdriver_client
    capabilities=capabilities or None)
..\..\..\moztrap\lib\site-packages\selenium\webdriver\firefox\webdriver.py:77: i
n __init__
    self.binary, timeout),
..\..\..\moztrap\lib\site-packages\selenium\webdriver\firefox\extension_connecti
on.py:49: in __init__
    self.binary.launch_browser(self.profile)
..\..\..\moztrap\lib\site-packages\selenium\webdriver\firefox\firefox_binary.py:
68: in launch_browser
    self._wait_until_connectable()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x0324
D8B0>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
                raise WebDriverException("The browser appears to have exited "
                      "before we could connect. If you specified a log_file in "

                      "the FirefoxBinary constructor, check it for details.")
            if count == 30:
                self.kill()
>               raise WebDriverException("Can't load the profile. Profile "
                      "Dir: %s If you specified a log_file in the "
                      "FirefoxBinary constructor, check it for details.")
E               WebDriverException: Message: Can't load the profile. Profile Dir
: %s If you specified a log_file in the FirefoxBinary constructor, check it for
details.

..\..\..\moztrap\lib\site-packages\selenium\webdriver\firefox\firefox_binary.py:
103: WebDriverException
---------------------------- Captured stderr setup ----------------------------
c:\users\Iryna\moztrap\lib\site-packages\requests\packages\urllib3\connectionp
ool.py:789: InsecureRequestWarning: Unverified HTTPS request is being made. Addi
ng certificate verification is strongly advised. See: https://urllib3.readthedoc
s.org/en/latest/security.html
  InsecureRequestWarning)
c:\users\Iryna\moztrap\lib\site-packages\requests\packages\urllib3\connectionp
ool.py:789: InsecureRequestWarning: Unverified HTTPS request is being made. Addi
ng certificate verification is strongly advised. See: https://urllib3.readthedoc
s.org/en/latest/security.html
  InsecureRequestWarning)
================ 35 tests deselected by "-m 'nondestructive'" =================
=================== 35 deselected, 1 error in 63.23 seconds ===================

(moztrap) C:\Users\Iryna\Documents\GitHub\moztrap-tests>py.test --driver=Firef
ox --desrtructive
usage: py.test [options] [file_or_dir] [file_or_dir] [...]
py.test: error: unrecognized arguments: --desrtructive

(moztrap) C:\Users\Iryna\Documents\GitHub\moztrap-tests>py.test --driver=Firef
ox
c:\users\Iryna\moztrap\lib\site-packages\requests\packages\urllib3\connectionp
ool.py:789: InsecureRequestWarning: Unverified HTTPS request is being made. Addi
ng certificate verification is strongly advised. See: https://urllib3.readthedoc
s.org/en/latest/security.html
  InsecureRequestWarning)
c:\users\Iryna\moztrap\lib\site-packages\requests\packages\urllib3\connectionp
ool.py:789: InsecureRequestWarning: Unverified HTTPS request is being made. Addi
ng certificate verification is strongly advised. See: https://urllib3.readthedoc
s.org/en/latest/security.html
  InsecureRequestWarning)
============================= test session starts =============================
platform win32 -- Python 2.7.11 -- py-1.4.31 -- pytest-2.7.3
rootdir: C:\Users\Iryna\Documents\GitHub\moztrap-tests, inifile:
plugins: mozwebqa, variables
collected 36 items

tests\test_homepage.py E

=================================== ERRORS ====================================
_____ ERROR at setup of TestHomepage.test_that_user_can_login_and_logout ______

item = <Function 'test_that_user_can_login_and_logout'>

    def pytest_runtest_setup(item):
        item.debug = {
            'urls': [],
            'screenshots': [],
            'html': [],
            'logs': [],
            'network_traffic': []}
        TestSetup.base_url = item.config.option.base_url

        # configure test proxies
        if hasattr(item.config, 'browsermob_test_proxy'):
            item.config.option.proxy_host = item.config.option.bmp_host
            item.config.option.proxy_port = item.config.browsermob_test_proxy.po
rt

        # consider this environment sensitive if the base url or any redirection

        # history matches the regular expression
        sensitive = False
        if TestSetup.base_url and not item.config.option.skip_url_check:
            r = requests.get(TestSetup.base_url, verify=False, timeout=REQUESTS_
TIMEOUT)
            urls = [h.url for h in r.history] + [r.url]
            matches = [re.search(item.config.option.sensitive_url, u) for u in u
rls]
            sensitive = any(matches)

        destructive = 'nondestructive' not in item.keywords

        if (sensitive and destructive):
            first_match = matches[next(i for i, match in enumerate(matches) if m
atch)]

            # skip the test with an appropriate message
            py.test.skip('This test is destructive and the target URL is '
                         'considered a sensitive environment. If this test is '
                         'not destructive, add the \'nondestructive\' marker to
'
                         'it. Sensitive URL: %s' % first_match.string)

        if item.config.option.sauce_labs_credentials_file:
            item.sauce_labs_credentials = credentials.read(item.config.option.sa
uce_labs_credentials_file)

        if item.config.option.credentials_file:
            TestSetup.credentials = credentials.read(item.config.option.credenti
als_file)

        test_id = '.'.join(split_class_and_test_names(item.nodeid))

        if 'skip_selenium' not in item.keywords:
            if hasattr(item, 'sauce_labs_credentials'):
                from sauce_labs import Client
                TestSetup.selenium_client = Client(
                    test_id,
                    item.config.option,
                    item.keywords,
                    item.sauce_labs_credentials)
            else:
                from selenium_client import Client
                TestSetup.selenium_client = Client(
                    test_id,
                    item.config.option)
>           TestSetup.selenium_client.start()

..\..\..\moztrap\lib\site-packages\pytest_mozwebqa\pytest_mozwebqa.py:128:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\moztrap\lib\site-packages\pytest_mozwebqa\selenium_client.py:91: in sta
rt
    self.start_webdriver_client()
..\..\..\moztrap\lib\site-packages\pytest_mozwebqa\selenium_client.py:162: in st
art_webdriver_client
    capabilities=capabilities or None)
..\..\..\moztrap\lib\site-packages\selenium\webdriver\firefox\webdriver.py:77: i
n __init__
    self.binary, timeout),
..\..\..\moztrap\lib\site-packages\selenium\webdriver\firefox\extension_connecti
on.py:49: in __init__
    self.binary.launch_browser(self.profile)
..\..\..\moztrap\lib\site-packages\selenium\webdriver\firefox\firefox_binary.py:
68: in launch_browser
    self._wait_until_connectable()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <selenium.webdriver.firefox.firefox_binary.FirefoxBinary object at 0x0339
5650>

    def _wait_until_connectable(self):
        """Blocks until the extension is connectable in the firefox."""
        count = 0
        while not utils.is_connectable(self.profile.port):
            if self.process.poll() is not None:
                # Browser has exited
                raise WebDriverException("The browser appears to have exited "
                      "before we could connect. If you specified a log_file in "

                      "the FirefoxBinary constructor, check it for details.")
            if count == 30:
                self.kill()
>               raise WebDriverException("Can't load the profile. Profile "
                      "Dir: %s If you specified a log_file in the "
                      "FirefoxBinary constructor, check it for details.")
E               WebDriverException: Message: Can't load the profile. Profile Dir
: %s If you specified a log_file in the FirefoxBinary constructor, check it for
details.

..\..\..\moztrap\lib\site-packages\selenium\webdriver\firefox\firefox_binary.py:
103: WebDriverException
---------------------------- Captured stderr setup ----------------------------
c:\users\Iryna\moztrap\lib\site-packages\requests\packages\urllib3\connectionp
ool.py:789: InsecureRequestWarning: Unverified HTTPS request is being made. Addi
ng certificate verification is strongly advised. See: https://urllib3.readthedoc
s.org/en/latest/security.html
  InsecureRequestWarning)
c:\users\Iryna\moztrap\lib\site-packages\requests\packages\urllib3\connectionp
ool.py:789: InsecureRequestWarning: Unverified HTTPS request is being made. Addi
ng certificate verification is strongly advised. See: https://urllib3.readthedoc
s.org/en/latest/security.html
  InsecureRequestWarning)
================ 35 tests deselected by "-m 'nondestructive'" =================
=================== 35 deselected, 1 error in 63.18 seconds ===================
